// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lemonade.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReplaceRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplaceRequest) Reset()         { *m = ReplaceRequest{} }
func (m *ReplaceRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceRequest) ProtoMessage()    {}
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb743e4414269ad4, []int{0}
}

func (m *ReplaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceRequest.Unmarshal(m, b)
}
func (m *ReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceRequest.Marshal(b, m, deterministic)
}
func (m *ReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceRequest.Merge(m, src)
}
func (m *ReplaceRequest) XXX_Size() int {
	return xxx_messageInfo_ReplaceRequest.Size(m)
}
func (m *ReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceRequest proto.InternalMessageInfo

func (m *ReplaceRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReplaceReply struct {
	Original             string   `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Matches              []string `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplaceReply) Reset()         { *m = ReplaceReply{} }
func (m *ReplaceReply) String() string { return proto.CompactTextString(m) }
func (*ReplaceReply) ProtoMessage()    {}
func (*ReplaceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb743e4414269ad4, []int{1}
}

func (m *ReplaceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceReply.Unmarshal(m, b)
}
func (m *ReplaceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceReply.Marshal(b, m, deterministic)
}
func (m *ReplaceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceReply.Merge(m, src)
}
func (m *ReplaceReply) XXX_Size() int {
	return xxx_messageInfo_ReplaceReply.Size(m)
}
func (m *ReplaceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceReply proto.InternalMessageInfo

func (m *ReplaceReply) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *ReplaceReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ReplaceReply) GetMatches() []string {
	if m != nil {
		return m.Matches
	}
	return nil
}

func init() {
	proto.RegisterType((*ReplaceRequest)(nil), "protos.ReplaceRequest")
	proto.RegisterType((*ReplaceReply)(nil), "protos.ReplaceReply")
}

func init() { proto.RegisterFile("lemonade.proto", fileDescriptor_fb743e4414269ad4) }

var fileDescriptor_fb743e4414269ad4 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x49, 0xcd, 0xcd,
	0xcf, 0x4b, 0x4c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a,
	0x5a, 0x5c, 0x7c, 0x41, 0xa9, 0x05, 0x39, 0x89, 0xc9, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x30, 0xae, 0x52, 0x1c, 0x17, 0x0f, 0x5c, 0x6d, 0x41, 0x4e, 0xa5, 0x90, 0x14,
	0x17, 0x47, 0x7e, 0x51, 0x66, 0x7a, 0x66, 0x5e, 0x62, 0x0e, 0x54, 0x29, 0x9c, 0x8f, 0x6c, 0x0a,
	0x13, 0x8a, 0x29, 0x60, 0x99, 0xc4, 0x92, 0xe4, 0x8c, 0xd4, 0x62, 0x09, 0x66, 0x05, 0x66, 0xb0,
	0x0c, 0x84, 0x6b, 0xe4, 0xca, 0xc5, 0xe1, 0x03, 0x75, 0xa5, 0x90, 0x25, 0x17, 0x3b, 0xd4, 0x2e,
	0x21, 0x31, 0x88, 0x93, 0x8b, 0xf5, 0x50, 0x1d, 0x2a, 0x25, 0x82, 0x21, 0x5e, 0x90, 0x53, 0xa9,
	0xc4, 0x90, 0x04, 0xf1, 0x9a, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x68, 0xac, 0x54, 0xf3,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LemonadeClient is the client API for Lemonade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LemonadeClient interface {
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceReply, error)
}

type lemonadeClient struct {
	cc *grpc.ClientConn
}

func NewLemonadeClient(cc *grpc.ClientConn) LemonadeClient {
	return &lemonadeClient{cc}
}

func (c *lemonadeClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceReply, error) {
	out := new(ReplaceReply)
	err := c.cc.Invoke(ctx, "/protos.Lemonade/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LemonadeServer is the server API for Lemonade service.
type LemonadeServer interface {
	Replace(context.Context, *ReplaceRequest) (*ReplaceReply, error)
}

// UnimplementedLemonadeServer can be embedded to have forward compatible implementations.
type UnimplementedLemonadeServer struct {
}

func (*UnimplementedLemonadeServer) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}

func RegisterLemonadeServer(s *grpc.Server, srv LemonadeServer) {
	s.RegisterService(&_Lemonade_serviceDesc, srv)
}

func _Lemonade_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LemonadeServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Lemonade/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LemonadeServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lemonade_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Lemonade",
	HandlerType: (*LemonadeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Replace",
			Handler:    _Lemonade_Replace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lemonade.proto",
}
